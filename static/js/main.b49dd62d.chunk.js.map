{"version":3,"sources":["constants/actionTypes.js","components/Review.js","components/Questions.js","components/Result.js","components/Quiz.js","App.js","serviceWorker.js","middleware.js","reducers/quiz.js","reducer.js","store.js","index.js"],"names":["ActionTypes","Review","isAnswered","q","options","some","x","selected","className","this","props","quiz","name","questions","map","index","key","id","onClick","move","Component","Questions","question","option","JSON","parse","stringify","find","questionTypeId","forEach","onAnswer","slice","pager","size","count","htmlFor","checked","type","onChange","config","allowBack","connect","state","mode","dispatch","payload","Result","isCorrect","every","isAnswer","disabled","Quiz","e","target","parseInt","onPagerUpdate","setMode","onSubmit","renderMode","App","quizes","quizId","setState","value","load","url","fetch","process","then","res","json","o","Object","assign","length","onQuizLoad","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","promiseMiddleware","store","next","action","initialQuiz","combineReducers","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b49dd62d.chunk.js","sourcesContent":["\nexport const ActionTypes = {\n    QuizLoad: 'QuizLoad',\n    QuizAnswer: 'QuizAnswer',\n    QuizSubmit: 'QuizSubmit',\n    PagerUpdate: 'PagerUpdate'\n}","import React, { Component } from 'react';\n\nclass Review extends Component {\n  isAnswered = q => {\n    return q.options.some(x => x.selected) ? 'Answered' : 'Not Answered';\n  };\n\n  render() {\n    return (\n      <div>\n        <h2 className='text-center font-weight-normal'>\n          Review Quiz: {this.props.quiz.name}\n        </h2>\n        <hr />\n        <div className='row text-center'>\n          {this.props.quiz.questions.map((q, index) => (\n            <div key={q.id} className='col-4 cursor-pointer'>\n              <div\n                id={index}\n                onClick={this.props.move}\n                className={`p-3 mb-2 ${\n                  this.isAnswered(q) === 'Answered' ? 'bg-info' : 'bg-warning'\n                }`}>\n                {index + 1}. {this.isAnswered(q)}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Review;\n","import React, { Component } from 'react';\nimport { ActionTypes } from '../constants/actionTypes';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  ...state.quiz,\n  ...state.mode,\n  ...state.pager\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAnswer: payload => dispatch({ type: ActionTypes.QuizAnswer, payload })\n});\n\nclass Questions extends Component {\n  onAnswer(question, option) {\n    let quiz = JSON.parse(JSON.stringify(this.props.quiz));\n    let q = quiz.questions.find(x => x.id === question.id);\n    if (q.questionTypeId === 1) {\n      q.options.forEach(x => {\n        x.selected = false;\n      });\n    }\n    q.options.find(x => x.id === option.id).selected = true;\n    this.props.onAnswer(quiz);\n  }\n\n  render() {\n    let questions = this.props.quiz.questions\n      ? this.props.quiz.questions.slice(\n          this.props.pager.index,\n          this.props.pager.index + this.props.pager.size\n        )\n      : [];\n    return (\n      <div id='quiz'>\n        <h2 className='text-center font-weight-normal'>\n          {this.props.quiz.name}\n        </h2>\n        <hr />\n        {questions.map(q => (\n          <div key={q.id}>\n            <div className='badge badge-info'>\n              Question {this.props.pager.index + 1} of {this.props.pager.count}.\n            </div>\n            <h3 className='font-weight-normal'>\n              {this.props.pager.index + 1}. <span>{q.name}</span>\n            </h3>\n            <div className='row text-left options'>\n              {q.options.map(option => (\n                <div key={option.id} className='col-6'>\n                  <div className='option'>\n                    <label className='font-weight-normal' htmlFor={option.id}>\n                      <input\n                        id={option.id}\n                        checked={option.selected}\n                        type='checkbox'\n                        onChange={() => this.onAnswer(q, option)}\n                      />\n                      {option.name}\n                    </label>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n        <hr />\n        <div className='text-center'>\n          {this.props.quiz.config.allowBack && (\n            <button\n              id='first'\n              className='btn btn-default'\n              onClick={this.props.move}>\n              First\n            </button>\n          )}\n          {this.props.quiz.config.allowBack && (\n            <button\n              id='prev'\n              className='btn btn-default'\n              onClick={this.props.move}>\n              Prev\n            </button>\n          )}\n          <button\n            id='next'\n            className='btn btn-primary'\n            onClick={this.props.move}>\n            Next\n          </button>\n          <button\n            id='last'\n            className='btn btn-default'\n            onClick={this.props.move}>\n            Last\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import React from 'react';\n\nfunction Result(props) {\n  let questions = props.questions;\n  questions.forEach(q => {\n    q.isCorrect = q.options.every(x => x.selected === x.isAnswer);\n  });\n\n  return (\n    <div className='result'>\n      <h2 className='text-center font-weight-normal'>Quiz Result</h2>\n      {questions.map((q, index) => (\n        <div\n          key={q.id}\n          className={`mb-2 ${q.isCorrect ? 'bg-success' : 'bg-danger'}`}>\n          <div className='result-question'>\n            <h5>\n              {index + 1}. {q.name}\n            </h5>\n            <div className='row'>\n              {q.options.map(option => (\n                <div key={option.id} className='col-6'>\n                  <input\n                    id={option.id}\n                    type='checkbox'\n                    disabled='disabled'\n                    checked={option.selected}\n                  />{' '}\n                  {option.name}\n                </div>\n              ))}\n            </div>\n            <div\n              className={`m-1 p-1 text-bold ${\n                q.isCorrect ? 'text-success' : 'text-danger'\n              }`}>\n              Your answer is {q.isCorrect ? 'Correct' : 'Wrong'}.\n            </div>\n          </div>\n        </div>\n      ))}\n      <h4 className='alert alert-info text-center'>\n        You may close this window now.\n      </h4>\n    </div>\n  );\n}\n\nexport default Result;\n","import React, { Component } from 'react';\nimport { ActionTypes } from '../constants/actionTypes';\nimport Review from './Review';\nimport Questions from './Questions';\nimport Result from './Result';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return { ...state.quiz, ...state.mode, ...state.pager };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: payload => dispatch({ type: ActionTypes.QuizSubmit, payload }),\n  onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass Quiz extends Component {\n  move = e => {\n    let id = e.target.id;\n    let index = 0;\n    if (id === 'first') index = 0;\n    else if (id === 'prev') index = this.props.pager.index - 1;\n    else if (id === 'next') index = this.props.pager.index + 1;\n    else if (id === 'last') index = this.props.pager.count - 1;\n    else index = parseInt(e.target.id, 10);\n\n    if (index >= 0 && index < this.props.pager.count) {\n      let pager = {\n        index: index,\n        size: 1,\n        count: this.props.pager.count\n      };\n      this.props.onPagerUpdate(pager);\n    }\n  };\n\n  setMode = e => this.props.onSubmit(e.target.id);\n\n  renderMode() {\n    if (this.props.mode === 'quiz') {\n      return <Questions move={this.move} />;\n    } else if (this.props.mode === 'review') {\n      return <Review quiz={this.props.quiz} move={this.move} />;\n    } else {\n      return <Result questions={this.props.quiz.questions || []} />;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderMode()}\n        {this.props.mode !== 'submit' && (\n          <div>\n            <hr />\n            <button id='quiz' className='btn btn-info' onClick={this.setMode}>\n              Quiz\n            </button>\n            <button id='review' className='btn btn-info' onClick={this.setMode}>\n              Review\n            </button>\n            <button\n              id='submit'\n              className='btn btn-primary'\n              onClick={this.setMode}>\n              Submit Quiz\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n","import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport { connect } from 'react-redux';\nimport { ActionTypes } from './constants/actionTypes';\n\nconst mapStateToProps = state => {\n  return { ...state.quiz };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onQuizLoad: payload => dispatch({ type: ActionTypes.QuizLoad, payload }),\n  onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass App extends Component {\n  state = {\n    quizes: [\n      { id: 'data/inegi.json', name: 'INEGI' },\n      { id: 'data/designPatterns.json', name: 'Design Patterns' }\n    ],\n    quizId: 'data/inegi.json'\n  };\n\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1\n  };\n\n  componentDidMount() {\n    this.load(this.state.quizId);\n  }\n\n  load(quizId) {\n    let url = quizId || this.props.quizId;\n    fetch(`${process.env.PUBLIC_URL}/${url}`)\n      .then(res => res.json())\n      .then(res => {\n        let quiz = res;\n        quiz.questions.forEach(q => {\n          q.options.forEach(o => (o.selected = false));\n        });\n        quiz.config = Object.assign(this.props.quiz.config || {}, quiz.config);\n        this.pager.count = quiz.questions.length / this.pager.size;\n        this.props.onQuizLoad(quiz);\n        this.props.onPagerUpdate(this.pager);\n      });\n  }\n\n  onChange = e => {\n    this.setState({ quizId: e.target.value });\n    this.load(e.target.value);\n  };\n\n  render() {\n    return (\n      <div className='container'>\n        <header className='p-2'>\n          <div className='row'>\n            <div className='col-6'>\n              <h3>Selene Quiz</h3>\n            </div>\n            <div className='col-6 text-right'>\n              <label className='mr-1'>Select Quiz:</label>\n              <select onChange={this.onChange}>\n                {this.state.quizes.map(q => (\n                  <option key={q.id} value={q.id}>\n                    {q.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </header>\n        <Quiz\n          quiz={this.state.quiz}\n          quizId={this.state.quizId}\n          mode={this.state.mode}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport { } from './constants/actionTypes';\n\nconst promiseMiddleware = store => next => action => {\n    // Do Nothing for now.//\n    next(action);\n};\n\nexport { promiseMiddleware }","import {\n    ActionTypes\n} from '../constants/actionTypes';\n\nlet initialQuiz = {\n    quiz: {\n        config: {\n            'allowBack': true,\n            'allowReview': true,\n            'autoMove': false,  // if true, it will move to next question automatically when answered.\n            'duration': 0,  // indicates the time in which quiz needs to be completed. 0 means unlimited.\n            'pageSize': 1,\n            'requiredAll': false,  // indicates if you must answer all the questions before submitting.\n            'richText': false,\n            'shuffleQuestions': false,\n            'shuffleOptions': false,\n            'showClock': false,\n            'showPager': true,\n            'theme': 'none'\n        },\n        questions: []\n    },\n    mode: 'quiz',\n    pager: {\n        index: 0,\n        size: 1,\n        count: 1\n    }\n}\n\nexport default (state = { ...initialQuiz }, action) => {\n    switch (action.type) {\n        case ActionTypes.PagerUpdate:\n            return {\n                ...state, pager: action.payload, mode: 'quiz'\n            }\n        case ActionTypes.QuizLoad:\n            return {\n                ...state, quiz: action.payload\n            }\n        case ActionTypes.QuizSubmit:\n            console.log('quiz.js Submitted.');\n            return {\n                ...state, mode: action.payload\n            }\n        case ActionTypes.QuizAnswer:\n            console.log('quiz.js reducer Quiz Answer called.');\n            return {\n                ...state, quiz: action.payload\n            }\n        default:\n            return state;\n    }\n};\n","import quiz from './reducers/quiz';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  quiz\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { promiseMiddleware } from './middleware';\nimport reducer from './reducer';\n\nconst getMiddleware = () => {\n    if (process.env.NODE_ENV === 'production') {\n        return applyMiddleware(promiseMiddleware);\n    } else {\n        return applyMiddleware(promiseMiddleware)\n    }\n};\n\nexport const store = createStore(reducer, composeWithDevTools(getMiddleware()));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}