{"version":3,"sources":["components/Review.js","actions/types.js","actions/index.js","components/Questions.js","utils/Constants.js","components/Result.js","components/Quiz.js","components/Header.js","components/Footer.js","i18n/index.js","App.js","reducers/quiz.js","reducers/literals.js","reducers/index.js","serviceWorker.js","index.js"],"names":["Review","isAnswered","q","options","some","x","selected","props","literals","answered","not_answered","className","this","review_quiz","quiz","name","questions","map","index","key","id","onClick","move","Component","connect","ActionTypes","onQuizLoad","payload","dispatch","a","type","onPagerUpdate","onAnswer","onSubmit","loadLiterals","Questions","question","option","JSON","parse","stringify","find","forEach","slice","pager","size","of","count","htmlFor","checked","onChange","class","role","config","allowBack","first","prev","next","last","state","mode","actions","URL_BASE","process","isCorrect","every","isAnswer","quiz_result","disabled","your_answer_is","correct","wrong","href","close_window","Quiz","e","target","parseInt","setMode","renderMode","review","submit_quiz","Header","quizes","quizId","setState","value","load","url","fetch","then","res","json","o","Object","assign","length","Footer","langs","en","es","App","lang","test","toLowerCase","loadLang","navigator","language","initialQuiz","allowReview","autoMove","duration","pageSize","requiredAll","richText","shuffleQuestions","shuffleOptions","showClock","showPager","theme","defaultState","combineReducers","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","reducers","composeWithDevTools","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1fcedf53.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Review extends Component {\n  isAnswered = (q) => {\n    return q.options.some((x) => x.selected)\n      ? this.props.literals.answered\n      : this.props.literals.not_answered;\n  };\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"text-center font-weight-normal\">\n          {this.props.literals.review_quiz}: {this.props.quiz.name}\n        </h3>\n        <hr />\n        <div className=\"row text-center\">\n          {this.props.quiz.questions.map((q, index) => (\n            <div key={q.id} className=\"col-lg-3 col-sm-4 col-6 cursor-pointer\">\n              <div\n                id={index}\n                onClick={this.props.move}\n                className={`p-3 mb-2 ${\n                  this.isAnswered(q) === this.props.literals.answered\n                    ? \"bg-info\"\n                    : \"bg-warning\"\n                }`}\n              >\n                {index + 1}. {this.isAnswered(q)}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ literals }) => ({\n  literals,\n});\n\nexport default connect(mapStateToProps)(Review);\n","export const ActionTypes = {\n  QuizLoad: \"QuizLoad\",\n  QuizAnswer: \"QuizAnswer\",\n  QuizSubmit: \"QuizSubmit\",\n  PagerUpdate: \"PagerUpdate\",\n};\n\nexport const LOAD_LITERALS = \"LOAD_LITERALS\";\n","import { ActionTypes, LOAD_LITERALS } from \"./types\";\n\nexport const onQuizLoad = (payload) => async (dispatch) => {\n  dispatch({\n    type: ActionTypes.QuizLoad,\n    payload,\n  });\n};\n\nexport const onPagerUpdate = (payload) => async (dispatch) => {\n  dispatch({\n    type: ActionTypes.PagerUpdate,\n    payload,\n  });\n};\n\nexport const onAnswer = (payload) => async (dispatch) => {\n  dispatch({\n    type: ActionTypes.QuizAnswer,\n    payload,\n  });\n};\n\nexport const onSubmit = (payload) => async (dispatch) => {\n  dispatch({\n    type: ActionTypes.QuizSubmit,\n    payload,\n  });\n};\n\nexport const loadLiterals = (payload) => async (dispatch) => {\n  dispatch({\n    type: LOAD_LITERALS,\n    payload,\n  });\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Questions extends Component {\n  onAnswer(question, option) {\n    let quiz = JSON.parse(JSON.stringify(this.props.quiz));\n    let q = quiz.questions.find((x) => x.id === question.id);\n\n    q.options.forEach((x) => {\n      x.selected = false;\n    });\n\n    q.options.find((x) => x.id === option.id).selected = true;\n    this.props.onAnswer(quiz);\n  }\n\n  render() {\n    let questions = this.props.quiz.questions\n      ? this.props.quiz.questions.slice(\n          this.props.pager.index,\n          this.props.pager.index + this.props.pager.size\n        )\n      : [];\n    return (\n      <div id=\"quiz\">\n        <h3 className=\"text-center font-weight-normal d-none d-sm-block\">\n          {this.props.quiz.name}\n        </h3>\n        <hr className=\"d-none d-sm-block\" />\n        {questions.map((q) => (\n          <div key={q.id}>\n            <div className=\"badge badge-info\">\n              {this.props.literals.question} {this.props.pager.index + 1}\n              {\" \" + this.props.literals.of} {this.props.pager.count}\n            </div>\n            <h4 className=\"font-weight-normal\">\n              {this.props.pager.index + 1}. <span>{q.name}</span>\n            </h4>\n            <div className=\"row text-left options\">\n              {q.options.map((option) => (\n                <div key={option.id} className=\"d-flex col-sm-6\">\n                  <div className=\"option flex-fill\">\n                    <label className=\"font-weight-normal\" htmlFor={option.id}>\n                      <input\n                        id={option.id}\n                        checked={option.selected}\n                        type=\"checkbox\"\n                        onChange={() => this.onAnswer(q, option)}\n                      />\n                      {option.name}\n                    </label>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n        <hr />\n        <div class=\"d-flex justify-content-center\">\n          <div className=\"btn-group\" role=\"group\">\n            {this.props.quiz.config.allowBack && (\n              <button\n                id=\"first\"\n                className=\"btn btn-default\"\n                onClick={this.props.move}\n              >\n                {this.props.literals.first}\n              </button>\n            )}\n            {this.props.quiz.config.allowBack && (\n              <button\n                id=\"prev\"\n                className=\"btn btn-default\"\n                onClick={this.props.move}\n              >\n                {this.props.literals.prev}\n              </button>\n            )}\n            <button\n              id=\"next\"\n              className=\"btn btn-primary\"\n              onClick={this.props.move}\n            >\n              {this.props.literals.next}\n            </button>\n            <button\n              id=\"last\"\n              className=\"btn btn-default\"\n              onClick={this.props.move}\n            >\n              {this.props.literals.last}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ...state.quiz,\n  ...state.mode,\n  ...state.pager,\n  literals: state.literals,\n});\n\nexport default connect(mapStateToProps, actions)(Questions);\n","export const URL_BASE = `${process.env.PUBLIC_URL}`;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { URL_BASE } from \"../utils/Constants\";\n\nfunction Result(props) {\n  let questions = props.questions;\n  questions.forEach((q) => {\n    q.isCorrect = q.options.every((x) => x.selected === x.isAnswer);\n  });\n\n  return (\n    <div className=\"result\">\n      <h3 className=\"text-center font-weight-normal\">\n        {props.literals.quiz_result}\n      </h3>\n      {questions.map((q, index) => (\n        <div\n          key={q.id}\n          className={`mb-2 ${q.isCorrect ? \"bg-success\" : \"bg-danger\"}`}\n        >\n          <div className=\"result-question\">\n            <h5>\n              {index + 1}. {q.name}\n            </h5>\n            <div className=\"row\">\n              {q.options.map((option) => (\n                <div key={option.id} className=\"col-sm-6\">\n                  <input\n                    id={option.id}\n                    type=\"checkbox\"\n                    disabled=\"disabled\"\n                    checked={option.selected}\n                  />{\" \"}\n                  {option.name}\n                </div>\n              ))}\n            </div>\n            <div\n              className={`m-1 p-1 text-bold ${\n                q.isCorrect ? \"text-success\" : \"text-danger\"\n              }`}\n            >\n              {props.literals.your_answer_is}{\" \"}\n              {q.isCorrect ? props.literals.correct : props.literals.wrong}.\n            </div>\n          </div>\n        </div>\n      ))}\n      <h4 className=\"alert alert-info text-center\">\n        <a href={`${URL_BASE}/`} className=\"btn btn-link\">\n          {props.literals.close_window}\n        </a>\n      </h4>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ literals }) => ({\n  literals,\n});\n\nexport default connect(mapStateToProps)(Result);\n","import React, { Component } from \"react\";\nimport Review from \"./Review\";\nimport Questions from \"./Questions\";\nimport Result from \"./Result\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Quiz extends Component {\n  move = (e) => {\n    let id = e.target.id;\n    let index = 0;\n    if (id === \"first\") index = 0;\n    else if (id === \"prev\") index = this.props.pager.index - 1;\n    else if (id === \"next\") index = this.props.pager.index + 1;\n    else if (id === \"last\") index = this.props.pager.count - 1;\n    else index = parseInt(e.target.id, 10);\n\n    if (index >= 0 && index < this.props.pager.count) {\n      let pager = {\n        index: index,\n        size: 1,\n        count: this.props.pager.count,\n      };\n      this.props.onPagerUpdate(pager);\n    }\n  };\n\n  setMode = (e) => this.props.onSubmit(e.target.id);\n\n  renderMode() {\n    if (this.props.mode === \"quiz\") {\n      return <Questions move={this.move} />;\n    } else if (this.props.mode === \"review\") {\n      return <Review quiz={this.props.quiz} move={this.move} />;\n    } else {\n      return <Result questions={this.props.quiz.questions || []} />;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderMode()}\n        {this.props.mode !== \"submit\" && (\n          <div>\n            <hr />\n            <button id=\"quiz\" className=\"btn btn-info\" onClick={this.setMode}>\n              {this.props.literals.quiz}\n            </button>\n            <button id=\"review\" className=\"btn btn-info\" onClick={this.setMode}>\n              {this.props.literals.review}\n            </button>\n            <button\n              id=\"submit\"\n              className=\"btn btn-primary\"\n              onClick={this.setMode}\n            >\n              {this.props.literals.submit_quiz}\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.quiz,\n    ...state.mode,\n    ...state.pager,\n    literals: state.literals,\n  };\n};\n\nexport default connect(mapStateToProps, actions)(Quiz);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { URL_BASE } from \"../utils/Constants\";\nimport * as actions from \"../actions\";\n\nclass Header extends Component {\n  state = {\n    quizes: [\n      { id: \"data/inegi.json\", name: \"INEGI\" },\n      { id: \"data/designPatterns.json\", name: \"Design Patterns\" },\n    ],\n    quizId: \"data/inegi.json\",\n  };\n\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1,\n  };\n\n  componentDidMount() {\n    this.load(this.state.quizId);\n  }\n\n  load(quizId) {\n    let url = quizId || this.props.quizId;\n    fetch(`${URL_BASE}/${url}`)\n      .then((res) => res.json())\n      .then((res) => {\n        let quiz = res;\n        quiz.questions.forEach((q) => {\n          q.options.forEach((o) => (o.selected = false));\n        });\n        quiz.config = Object.assign(this.props.quiz.config || {}, quiz.config);\n        this.pager.count = quiz.questions.length / this.pager.size;\n        this.props.onQuizLoad(quiz);\n        this.props.onPagerUpdate(this.pager);\n      });\n  }\n\n  onChange = (e) => {\n    this.setState({ quizId: e.target.value });\n    this.load(e.target.value);\n  };\n\n  render() {\n    return (\n      <header className=\"p-2\">\n        <div className=\"row\">\n          <div className=\"mr-auto\">\n            <h3 className=\"text-primary font-weight-bold\">Selene's Quiz</h3>\n          </div>\n          <div className=\"col-lg-4 col-sm-6\">\n            <div className=\"input-group\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Quiz:</span>\n              </div>\n              <select\n                className=\"form-control\"\n                id=\"selectQuiz\"\n                onChange={this.onChange}\n              >\n                {this.state.quizes.map((q) => (\n                  <option key={q.id} value={q.id}>\n                    {q.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { ...state.quiz };\n};\n\nexport default connect(mapStateToProps, actions)(Header);\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"text-center p-2\">\n        <span className=\"text-muted\"></span>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import en from \"./en.json\";\nimport es from \"./es.json\";\n\nconst langs = {\n  en,\n  es,\n};\n\nexport default function (lang = \"en-US\") {\n  switch (true) {\n    case /es-*/.test(lang.toLowerCase()):\n      lang = \"es\";\n      break;\n    default:\n      lang = \"en\";\n  }\n\n  return langs[lang];\n}\n","import React, { Component } from \"react\";\nimport Quiz from \"./components/Quiz\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport { connect } from \"react-redux\";\nimport loadLang from \"./i18n\";\nimport * as actions from \"./actions\";\nimport \"./scss/custom.scss\";\nimport \"./css/App.css\";\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.props.loadLiterals(loadLang(navigator.language));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Quiz\n          quiz={this.state.quiz}\n          quizId={this.state.quizId}\n          mode={this.state.mode}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default connect(null, actions)(App);\n","import { ActionTypes } from \"../actions/types\";\n\nlet initialQuiz = {\n  quiz: {\n    config: {\n      allowBack: true,\n      allowReview: true,\n      autoMove: false, // if true, it will move to next question automatically when answered.\n      duration: 0, // indicates the time in which quiz needs to be completed. 0 means unlimited.\n      pageSize: 1,\n      requiredAll: false, // indicates if you must answer all the questions before submitting.\n      richText: false,\n      shuffleQuestions: false,\n      shuffleOptions: false,\n      showClock: false,\n      showPager: true,\n      theme: \"none\",\n    },\n    questions: [],\n  },\n  mode: \"quiz\",\n  pager: {\n    index: 0,\n    size: 1,\n    count: 1,\n  },\n};\n\nexport default (state = { ...initialQuiz }, { type, payload }) => {\n  switch (type) {\n    case ActionTypes.PagerUpdate:\n      return {\n        ...state,\n        pager: payload,\n        mode: \"quiz\",\n      };\n    case ActionTypes.QuizLoad:\n      return {\n        ...state,\n        quiz: payload,\n      };\n    case ActionTypes.QuizSubmit:\n      console.log(\"quiz.js Submitted.\");\n      return {\n        ...state,\n        mode: payload,\n      };\n    case ActionTypes.QuizAnswer:\n      console.log(\"quiz.js reducer Quiz Answer called.\");\n      return {\n        ...state,\n        quiz: payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { LOAD_LITERALS } from \"../actions/types\";\nconst defaultState = {};\n\nexport default (state = defaultState, { type, payload }) => {\n  switch (type) {\n    case LOAD_LITERALS:\n      return payload;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport quiz from \"./quiz\";\nimport literals from \"./literals.js\";\n\nexport default combineReducers({\n  quiz,\n  literals,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport reduxThunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}